<%= form_for Event.new do |f| %>
  <%= f.label :name %>
  <%= f.text_field :name %>
  <%= f.label :description %>
  <%= f.text_field :description %>
  <%= f.label :start_time %>
  <%= f.datetime_select :start_time %>
  <%= f.label :end_time %>
  <%= f.datetime_select :end_time, default: 3.hours.from_now %>
  <%= f.submit "Create your Event!" %>
<% end %>


<h1>Listing events</h1>

<div id="fb-root"></div>
<script>
  window.fbAsyncInit = function() {
    FB.init({
      appId      : '370884386324798', // App ID
      channelUrl : '//www.joinmenow.co/channel.html', // Channel File
      status     : true, // check login status
      cookie     : true, // enable cookies to allow the server to access the session
      xfbml      : true  // parse XFBML
    });

    FB.Event.subscribe('auth.statusChange', handleStatusChange);
  };

   function handleStatusChange(response) {
     document.body.className = response.authResponse ? 'connected' : 'not_connected';

     if (response.authResponse) {
       console.log(response);
     }
   }

  // Load the SDK Asynchronously
  (function(d){
     var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
     if (d.getElementById(id)) {return;}
     js = d.createElement('script'); js.id = id; js.async = true;
     js.src = "//connect.facebook.net/en_US/all.js";
     ref.parentNode.insertBefore(js, ref);
   }(document));

    function search_events() {
        FB.api('/search?q=conference&type=event', function(response) {
            alert(JSON.stringify(response));
        });
    }
</script>

<button onclick="search_events();">
    search events
</button>

<table>
  <tr>
    <th></th>
    <th></th>
    <th></th>
  </tr>

<% @events.each do |event| %>
  <tr>
    <td><%= link_to 'Show', event %></td>
    <td><%= link_to 'Edit', edit_event_path(event) %></td>
    <td><%= link_to 'Destroy', event, method: :delete, data: { confirm: 'Are you sure?' } %></td>
  </tr>
<% end %>
</table>

<br />

<%= link_to 'New Event', new_event_path %>

<div id="map_canvas" style="width:400px;height:300px;">
</div>

<script>
function create_map(map_div, lat, lng, zoom) {
    var center = new google.maps.LatLng(lat || JMN.DEFAULTS.latitude, lng || JMN.DEFAULTS.longitude);
	var map = new google.maps.Map(map_div, {
		center: center,
		zoom: zoom || JMN.DEFAULTS.zoom,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
		disableDefaultUI: false,
		streetViewControl: false,
		panControl: false,
		zoomControl: true,
		zoomControlOptions: {
			style: google.maps.ZoomControlStyle.SMALL
		},
		overviewMapControl: false,
		mapTypeControl: false,
		mapTypeControlOptions: {
			style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
		}
	});
	return map;
}

function create_circle(map, point, radius) {
    var circle_opts = {
        map: map,
        center: point,
        strokeColor: JMN.DEFAULTS.circle_colour,
        strokeWeight: 2,
        fillColor: JMN.DEFAULTS.circle_colour,
        fillOpacity: 0.25,
        radius: radius,
    };
    return new google.maps.Circle(circle_opts);
}

function init() {
	var lat = 49.2825646098;    // Downtown Vancouver
	var lng = -123.1181656402; // Downtown Vancouver
	var zoom = 12;

//    MAP = create_map(document.getElementById("map_canvas"), lat,lng,zoom);// TODO: fill with dynamic data
    MAP = create_map($("#map_canvas")[0], lat, lng, zoom);
    var coords = null;
    console.log("created map!");

    console.log("created map!");

    JMN.geolocate()
        .done(function(location) {
            console.log("succesfully geolocated: ", location);
            coords = location.coords;   // if got Geolocation, then overwrite coords
            var latlng = new google.maps.LatLng(coords.latitude, coords.longitude);
            MAP.setCenter(latlng);

            // create circle:
            var marker_opts = {
                icon: new google.maps.MarkerImage("/assets/blank_marker.png"),
                position: latlng,
                draggable: true,
            };
            var circle_opts = {
                center: latlng,
                radius: coords.accuracy,
                editable: true,
            };
            var marker = JMN.add_circle_marker(MAP, marker_opts, circle_opts);

//            var circle = create_circle_marker(MAP, latlng, coords.accuracy);
            MAP.fitBounds(marker.getBounds());
        }).fail(function(msg) {
            console.log("geolocation failed!", msg);
        }).always(function() {
            console.log("geolocation always!");
        });
}

$(document).ready(init);

</script>
