<h1>Listing events</h1>

<div id="fb-root"></div>
<script>
  window.fbAsyncInit = function() {
    FB.init({
      appId      : '370884386324798', // App ID
      channelUrl : '//www.joinmenow.co/channel.html', // Channel File
      status     : true, // check login status
      cookie     : true, // enable cookies to allow the server to access the session
      xfbml      : true  // parse XFBML
    });

    FB.Event.subscribe('auth.statusChange', handleStatusChange);
  };

   function handleStatusChange(response) {
     document.body.className = response.authResponse ? 'connected' : 'not_connected';

     if (response.authResponse) {
       console.log(response);
     }
   }

  // Load the SDK Asynchronously
  (function(d){
     var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
     if (d.getElementById(id)) {return;}
     js = d.createElement('script'); js.id = id; js.async = true;
     js.src = "//connect.facebook.net/en_US/all.js";
     ref.parentNode.insertBefore(js, ref);
   }(document));
</script>

<button onclick="search_events();">
    search events
</button>
<button onclick="join();">
    join event
</button>

<table>
  <tr>
    <th></th>
    <th></th>
    <th></th>
  </tr>

<% @events.each do |event| %>
  <tr>
    <td><%= link_to 'Show', event %></td>
    <td><%= link_to 'Edit', edit_event_path(event) %></td>
    <td><%= link_to 'Destroy', event, method: :delete, data: { confirm: 'Are you sure?' } %></td>
  </tr>
<% end %>
</table>

<br />

<%= link_to 'New Event', new_event_path %>

<div id="map_canvas" style="width:400px;height:300px;">
</div>

<script>
MAP = null;
EVENT_MARKER = null;
USER_MARKER = null;
EVENT_MARKERS = [];

function create_map(map_div, lat, lng, zoom) {
    var center = new google.maps.LatLng(lat || JMN.DEFAULTS.latitude, lng || JMN.DEFAULTS.longitude);
	var map = new google.maps.Map(map_div, {
		center: center,
		zoom: zoom || JMN.DEFAULTS.zoom,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
		disableDefaultUI: false,
		streetViewControl: false,
		panControl: false,
		zoomControl: true,
		zoomControlOptions: {
			style: google.maps.ZoomControlStyle.SMALL
		},
		overviewMapControl: false,
		mapTypeControl: false,
		mapTypeControlOptions: {
			style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
		},
        disableDoubleClickZoom: true,
	});
	return map;
}

function search_events() {
    var params = {lat:MAP.getCenter().lat(), lon:MAP.getCenter().lng(), radius:5000}
    return $.getJSON("/events/search", params)
        .done(function(data) {
            var bounds = new google.maps.LatLngBounds();
            bounds.extend(USER_MARKER.getPosition());

            _.each(data, function(val,i) {
                var pos = new google.maps.LatLng(val.lat, val.lon);
                var marker = new google.maps.Marker({
                    map: MAP,
                    icon: new google.maps.MarkerImage("/assets/blue_markers_small/"+ (i+1)),
                    position: pos,
                    title: val.name,
                });
                var infowindow = new google.maps.InfoWindow(
                { content: "<h4>"+val.name+"</h4><p>"+val.description+"</p><p>start time: "+val.start_time+"<br/>end time: "+val.end_time+"</p>",
                    size: new google.maps.Size(50,50),
                });
                google.maps.event.addListener(marker, 'click', function() {
                   infowindow.open(MAP, marker);
                });


                EVENT_MARKERS.push(marker);
                bounds.extend(pos);
            });

            MAP.fitBounds(bounds);

        }).fail(function(response) {
            console.log("ERROR: search failed: params = ", params, " response = ", response);
        })
}

function init() {
	var lat = 49.2825646098;    // Downtown Vancouver
	var lng = -123.1181656402; // Downtown Vancouver
	var zoom = 12;

    MAP = create_map($("#map_canvas")[0], lat, lng, zoom);

    var coords = null;
    JMN.geolocate()
        .done(function(location) {
            console.log("succesfully geolocated: ", location);
            coords = location.coords;   // if got Geolocation, then overwrite coords
            var latlng = new google.maps.LatLng(coords.latitude, coords.longitude);
            MAP.setCenter(latlng);

            // create circle:
            var marker_opts = {
                icon: new google.maps.MarkerImage("/assets/blank_marker.png"),
                position: latlng,
                draggable: true,
            };
            var circle_opts = {
                center: latlng,
                radius: coords.accuracy,
                editable: true,
            };
            USER_MARKER = JMN.add_circle_marker(MAP, marker_opts, circle_opts);

//            var circle = create_circle_marker(MAP, latlng, coords.accuracy);
            MAP.fitBounds(USER_MARKER.getBounds());
            MAP.setZoom(MAP.getZoom() - 2);
        }).fail(function(msg) {
            console.log("geolocation failed!", msg);
        }).always(function() {
            console.log("geolocation always!");
        });
}

$(document).ready(init);

</script>
